{"_id":"strider-extension-loader","_rev":"53-c4631bc2173d4c7b64a86e5884bffbe3","name":"strider-extension-loader","description":"Load Strider extensions","dist-tags":{"latest":"0.4.5"},"versions":{"0.0.1":{"name":"strider-extension-loader","version":"0.0.1","description":"Load Strider extensions","main":"main.js","dependencies":{"step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/niallo/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_id":"strider-extension-loader@0.0.1","dist":{"shasum":"b3102a8f394d062c031359f64ba2ae8f9f7cb419","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.1.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.2":{"name":"strider-extension-loader","version":"0.0.2","description":"Load Strider extensions","main":"main.js","dependencies":{"step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/niallo/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_id":"strider-extension-loader@0.0.2","dist":{"shasum":"4794d0b6bd4ed69c06323d8e73a8f9bb1cb821c3","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.2.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.4":{"name":"strider-extension-loader","version":"0.0.4","description":"Load Strider extensions","main":"main.js","dependencies":{"step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"nialljohiggins@gmail.com"},"_id":"strider-extension-loader@0.0.4","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"babc84e7e40bf8c4e673bc5ec6ed309b08929ab9","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.4.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.5":{"name":"strider-extension-loader","version":"0.0.5","description":"Load Strider extensions","main":"main.js","dependencies":{"step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"nialljohiggins@gmail.com"},"_id":"strider-extension-loader@0.0.5","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"9a0709c22eb4fe2f063072ae258aa9d968480482","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.5.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.6":{"name":"strider-extension-loader","version":"0.0.6","description":"Load Strider extensions","main":"main.js","dependencies":{"step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"nialljohiggins@gmail.com"},"_id":"strider-extension-loader@0.0.6","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"dd20c420753b9136b33e2a2d9966a23d28a4e694","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.6.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.7":{"name":"strider-extension-loader","version":"0.0.7","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"nialljohiggins@gmail.com"},"_id":"strider-extension-loader@0.0.7","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"38319a3479c946e54d12bc4d841c575741d66ebf","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.7.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.8":{"name":"strider-extension-loader","version":"0.0.8","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"nialljohiggins@gmail.com"},"_id":"strider-extension-loader@0.0.8","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"8ca40a602733e17b02378cfdc0f5b6a77df82fbb","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.8.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.9":{"name":"strider-extension-loader","version":"0.0.9","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/niallo/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_id":"strider-extension-loader@0.0.9","dist":{"shasum":"c183f215bf2fa08e07dcea53f9f66cbbfcea78f2","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.9.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.10":{"name":"strider-extension-loader","version":"0.0.10","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/niallo/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_id":"strider-extension-loader@0.0.10","dist":{"shasum":"f774fb4507198d677c4a39c644b24e5c2a9eadc0","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.10.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.11":{"name":"strider-extension-loader","version":"0.0.11","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"_id":"strider-extension-loader@0.0.11","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"5562b0f5d30b1a96f750730b06f321ab35d61445","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.11.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.12":{"name":"strider-extension-loader","version":"0.0.12","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"_id":"strider-extension-loader@0.0.12","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"8651dbc4712cac7d302e55c9aebd3b12b2cdb0f1","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.12.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.0.13":{"name":"strider-extension-loader","version":"0.0.13","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"git://github.com/niallo/strider-extension-loader.git"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"_id":"strider-extension-loader@0.0.13","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"169d32782bb65d19ea74e36591275755df6eddfa","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.0.13.tgz"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.1.0":{"name":"strider-extension-loader","version":"0.1.0","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/niallo/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_id":"strider-extension-loader@0.1.0","dist":{"shasum":"9c0e72e3cdfdee86bcf65d5a0343992838b02fc8","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.1.0.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.1.1":{"name":"strider-extension-loader","version":"0.1.1","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/niallo/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@beyondfog.com","url":"http://niallohiggins.com"},"license":"BSD","_id":"strider-extension-loader@0.1.1","dist":{"shasum":"5b743f8f59145ded08821c9cde64f707dec90d41","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.2.1":{"name":"strider-extension-loader","version":"0.2.1","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","_id":"strider-extension-loader@0.2.1","dist":{"shasum":"881e4f129151c213584ff8cbcb251abd44a70a7a","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.2.2":{"name":"strider-extension-loader","version":"0.2.2","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","_id":"strider-extension-loader@0.2.2","dist":{"shasum":"00fa0530cbe98077ebe630fb18362d690aae994b","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"niallo","email":"niallo@beyondfog.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.2.3":{"name":"strider-extension-loader","version":"0.2.3","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"_id":"strider-extension-loader@0.2.3","dist":{"shasum":"63212cca9c72127914dff714741110a55d2d1d6a","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.2.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.3.0":{"name":"strider-extension-loader","version":"0.3.0","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"_id":"strider-extension-loader@0.3.0","dist":{"shasum":"4cfec15d523b6499b8bdf7b53ff186fb258615c3","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.3.1":{"name":"strider-extension-loader","version":"0.3.1","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"_id":"strider-extension-loader@0.3.1","dist":{"shasum":"52ae865765dce5f71b4f8f6f57084e5f200e5660","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.3.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.4.0":{"name":"strider-extension-loader","version":"0.4.0","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6","methods":"0.0.1","less":"~1.4.2","underscore":"~1.5.2"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1","jshint":"~2.1.10"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"homepage":"https://github.com/Strider-CD/strider-extension-loader","_id":"strider-extension-loader@0.4.0","dist":{"shasum":"66b6c92489dff529334152df1263001bbbaa9463","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.4.1":{"name":"strider-extension-loader","version":"0.4.1","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6","methods":"0.0.1","less":"~1.4.2","underscore":"~1.5.2"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1","jshint":"~2.1.10"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"homepage":"https://github.com/Strider-CD/strider-extension-loader","_id":"strider-extension-loader@0.4.1","dist":{"shasum":"f4732d1d0c4871e204437915774adc9c22859d7b","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.4.1.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.4.2":{"name":"strider-extension-loader","version":"0.4.2","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6","methods":"0.0.1","less":"~1.4.2","underscore":"~1.5.2"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1","jshint":"~2.1.10"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"homepage":"https://github.com/Strider-CD/strider-extension-loader","_id":"strider-extension-loader@0.4.2","dist":{"shasum":"0f977b73d8637b9d757c610d6b6f99efbf3203eb","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.4.2.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.4.3":{"name":"strider-extension-loader","version":"0.4.3","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6","methods":"0.0.1","less":"~1.4.2","underscore":"~1.5.2"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1","jshint":"~2.1.10"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"homepage":"https://github.com/Strider-CD/strider-extension-loader","_id":"strider-extension-loader@0.4.3","dist":{"shasum":"95b87908785192f21ba86fa944cc80ca55252cbe","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.4.3.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"directories":{}},"0.4.4":{"name":"strider-extension-loader","version":"0.4.4","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6","methods":"0.0.1","less":"~1.4.2","underscore":"~1.5.2"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1","jshint":"~2.1.10"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","gitHead":"98dde5ed6fb7fcdbb547e70bd737211290c12fb4","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"homepage":"https://github.com/Strider-CD/strider-extension-loader","_id":"strider-extension-loader@0.4.4","_shasum":"9e1e676a14195091c2002c763c1fe1ff65ade8a1","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"niallo","email":"niallo@frozenridge.co"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"dist":{"shasum":"9e1e676a14195091c2002c763c1fe1ff65ade8a1","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.4.4.tgz"},"directories":{}},"0.4.5":{"name":"strider-extension-loader","version":"0.4.5","description":"Load Strider extensions","main":"main.js","dependencies":{"connect":"~2.4.2","step":"~0.0.5","async":"~0.2.6","methods":"0.0.1","less":"~1.4.2","underscore":"~1.5.2"},"devDependencies":{"mocha":"~1.3.0","chai":"~1.1.1","underscore":"1.5.1","jshint":"~2.1.10"},"scripts":{"test":"mocha -R tap"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"license":"BSD","gitHead":"38ab147ece22b10771a6c636cd1fd316305ed60f","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"homepage":"https://github.com/Strider-CD/strider-extension-loader","_id":"strider-extension-loader@0.4.5","_shasum":"f1eeb4b05a4c4f0993f144e905c7ed703e4ca455","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"niallo","email":"nialljohiggins@gmail.com"},"maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"}],"dist":{"shasum":"f1eeb4b05a4c4f0993f144e905c7ed703e4ca455","tarball":"http://registry.npmjs.org/strider-extension-loader/-/strider-extension-loader-0.4.5.tgz"},"directories":{}}},"readme":"# Strider Extension Loader\n\n[Strider](https://github.com/Strider-CD/strider) is an extensible CI\nsystem, written in node. Strider extensions are simply NPM packages\nwith additional metadata contained in a file named\n`strider.json`. This metadata tells Strider which JavaScript source\nfiles should be loaded and initialized.\n\nHence, to install a new Strider extension, you can just `npm install`\nit in your strider repositiory.\n\nThis is a small Node.JS library for loading Strider extensions.\n\n## API\n\n```\nvar Loader = require('strider-extension-loader');\nvar loader = new Loader();\n```\n\n### new Loader(lesspaths, isNamespaced)\n* `lesspaths` is an optional list of directories that will be made\n  available while compiling plugins' `less` style files.\n* `isNamespaced` is for backwards compatibility with older versions\n  where the default type controllers e.g. `JobController` were not namespaced.\n  For versions < 1.6.0 this property should NOT be set.\n\n### .collectExtensions(dirs, done(err))\n\nCollect all strider extensions found in the given directories.\n\n### .initWebAppExtensions(context, done(err, extensions))\n\nLoad the \"webapp\" portion of all extensions.\n\n`extensions` looks like `{ plugintype: { pluginid: loadedPlugin, ... }, ... }`\n\nThe structure of the `loadedPlugin` object depend on the plugin type.\n- job: \n\n### .initWorkerExtensions(context, done(err, extensions))\n\nSame as `initWebAppExtensions` but for the `worker` portion.\n\n### .initTemplates(done(err, templates))\n\nLoad all of the templates from all extensions. `templates` looks like\n`{ templatename: stringtemplate, ... }`.\n\n### .initStaticDirs(app, done(err))\n\nRegister the `/static/` directories of all plugins to map to `/ext/:pluginid`.\n\n### .initConfig(jspath, csspath, done(err, configs))\n\nAssets for configuring plugins on the `/my/project/config` page.\n\nCollect the html, js, and css for all plugins. This is per-project\nconfig. js scripts will each be wrapped in an anonymous function to\nnamespace it, and concatenated into one file (in future it will also\nbe minified). Stylesheets will also be concatenated together, and\n`.less` files will be compiled to css (with the lesspaths available\nfor imports).\n\nThen the js and css are written to the files specified `jspath` and\n`csspath`.\n\nHtml for the templates are available on the `configs` objects.\n\nConfigs look like `{ plugintype: { pluginid: config, ...}, ... }` and\n`config` looks like:\n\n```js\n{\n  id: \"myplugin\",\n  controller: \"MyController\", // defaults to [plugintype]Controller\n  html: \"<the>html</the>\",    // loaded from config.template\n  icon: \"icon.png\",           // relative to the plugin's `static` directory\n  title: \"My Plugin\"\n}\n```\n\nBasically, this is constructed from the `strider` section of\npackage.json.\n\n```js\n\"strider\": {\n  \"id\": \"myplugin\",\n  \"title\": \"My Plugin\",\n  \"icon\": \"icon.png\", // should be in the ./static dir\n  \"config\": {\n    \"controller\": // defaults to \"Config.JobController\" for job plugins, \"Config.ProviderController\", etc.\n    \"script\":     // path where the js should be loaded from. Path defaults to \"config/config.js\"\n    \"style\":      // defaults to \"config/config.less\"\n    \"template\":   // defaults to \"config/config.html\"\n  }\n}\n```\n\nI hope that's clear.\n\n#### Angular Controller\n\nIf you don't need to do anything fancy, you can just use the default\ncontroller for your plugin type. Take a look in\n[strider's `client/config/controllers` directory][config-controllers] for the source of\nthose controllers. Basically, each controller makes available a\n`config` object on the scope, which is populated by the plugin's\nconfig for the currently selected branch. Also a `save()` function is\navailable on the scope.\n\nSo, for example, the simplest configuration template for any plugin\ntype could just have\n\n```html\n<input ng-model=\"config.oneAttr\" placeholder=\"One Attribute Here\">\n<button class=\"btn\" ng-click=\"save()\">Save</button>\n```\n\nNo javascript required. Just put that in \"config/config.html\" and\nyou're done.\n\n### .initUserConfig(jspath, csspath, done)\n\nThis is very similar to initConfig, but for per-user as opposed to\nper-project config. For provider plugins, the default file name is\n`config/accountConfig.html, js, less`, and for all other plugin types\nit's `config/userConfig.html, js, less`.\n\n### .initStatusBlocks(jspath, csspath, done)\n\nStatus blocks allow plugins to \n\n## Strider Extensions\n\n### Extension types\n\n- **runner:** runs the jobs, like strider-simple-runner\n- **provider:** gets the source code for a project, like strider-github,\n  strider-bitbucket or strider-git. Can be hosted or regular.\n- **job:** setup the environment, run tests, deploy etc. like strider-node or strider-sauce\n- **basic:** do whatever you want. If you need more power, use this, but\n  you don't get the helpers provided by the more specific plugin types.\n\n### Webapp vs Worker\n\nThere are two environments where plugins are loaded, webapp and worker.\n\n#### Webapp environment\n\nEffects the way the strider webapp works, how it looks, etc. You can\ndefine templates, serve static files, listen to global strider events,\nand other great things.\n\n#### Worker environment\n\nThis code is loaded for each job that is run, by the process that is\nrunning the job. This may be the same process as the webapp (as when\nusing `strider-simple-runner`), or it might be somewhere else\nentirely. Accordingly, it is recommended that you not depend on\nnetwork connections unless absolutely necessary. In many cases, you\ncan pass a message up to the strider app and handle it in your\n`webapp` code.\n\n### Strider.json\n\nTo declare your npm package as a strider plugin, include a\n`strider.json` in the base directory. Alternatively, you can have a\n`strider` section to your `package.json`.\n\n`strider.json` schema:\n\n```javascript\n{\n  \"id\": \"pluginid\", // must be unique.\n  \"title\": \"Human Readable\",\n  \"icon\": \"icon.png\", // relative to the plugin's `static` directory\n  \"type\": \"runner | provider | job | basic\", // defaults to basic\n  \"webapp\": \"filename.js\", // loaded in the webapp environment\n  \"worker\": \"filename.js\", // loaded in the worker environment\n  \"templates\": {\n    \"tplname\": \"<div>Hello {{ name }}</div>\",\n    \"tplname\": \"path/to/tpl.html\"\n  },\n  \"config\": { // project-specific configuration\n    \"controller\": // defaults to \"Config.JobController\" for job plugins, \"Config.ProviderController\", etc.\n    \"script\":     // path where the js should be loaded from. Path defaults to \"config/config.js\"\n    \"style\":      // defaults to \"config/config.less\". Can be less or css\n    \"template\":   // defaults to \"config/config.html\"\n  }\n  // other configurations\n}\n```\n\nAdditionally, if there is a `/static/` directory, the files within it\nwill be accessible at the path `/ext/:pluginid`.\n\n### Runner\n\nRunner plugins do not get loaded in the worker environment.\n\n#### Webapp\n\n```javascript\nmodule.exports = {\n  config: {}, // mongoose schema. This will be per-project config\n  appConfig: {}, // mongoose schema. Global config\n  create: function (emitter, options, callback(err, runner)) {  }\n}\n```\n\n#### Runner object\n\n##### properties\n\nThese are used for the strider admin dashboard.\n\n- `capacity`\n- `running` number of jobs currently running\n- `queued` length of the queue\n\n##### handles events\n\n- `job.new (job)` see strider-runner-core for a description of the `job` data\n- `job.cancel (jobid)` if the runner has the specified job, either\n  queued or in process, stop it and fire the `job.canceled` event\n\nRunners are only expected to handle a job if `job.project.runner.id`\nidentifies it as belonging to this runner.\n\n##### emits events\n\n- `browser.update (eventname, data)` this is for proxying internal\n  `job.status` events up to the browser\n- `job.queued (jobid, time)`\n- `job.done (data)`\n\n#### Extra config\n\n- `panel` see the job plugin section\n- `appPanel` similar to panel, but for global config\n\n### Provider\n\nProvider plugins that need an ssh keypair are encouraged to use the\n`privkey` and `pubkey` that are defined for each project. They are\nattributes on the `project` object.\n\n#### Webapp\n\n```javascript\nmodule.exports = {\n  // mongoose schema for project-specific config\n  config: {},\n \n  // mongoose schema for user-level config (like a github OAuth token) and/or cache\n  userConfig: {},\n  // optional; used by services such as github, bitbucket, etc.\n \n  // getFile: used to get the .strider.json file\n  getFile: function (filepath, userConfig, config, project, done(err, filecontents))\n \n  // getBranches: get the branches for a repository\n  getBranches: function (userConfig, config, project, done(err, [branchname, ...]))\n \n  // listRepos: only used by providers that connect to a hosted service.\n  // repos: { groupname: [repo, ...], groupname: ... }\n  listRepos: function (userConfig, done(err, repos)) {},\n\n  // if this provider plugin needs setup (in github's case, oauth) this string\n  // represents the href link to the page to handle that.\n  setupLink: \"/ext/github/oauth\",\n\n  // determine whether or not this provider is setup for this user.\n  // e.g. for github, that we have an oauth key\n  // returns boolean\n  isSetup: function (account) {},\n \n  initialize: function (userConfig, repo, done(err, name, display_url, config)) {},\n  // namespaced to /ext/:pluginid\n  routes: function (app, context) {\n  }\n}\n```\n\nThe `repos` that are returned by `listRepos` contain objects\nwhich, when activated, will be the provider config for the project. As\nsuch, it is required to have a `url` that is unique, a `name` that\nlooks like \"org/name\" and it should also define a `display_url` where\nappropriate. All other config is up to you.\n\n```javascript\n{\n   name: 'some/name', // should have exactly one '/'\n   // this has to be unique; it's how we identify whether a project\n   // has already been configured.\n   url: 'http://example.com/unique/url.git',\n   // optional - linked to from the project page\n   display_url: 'http://example.com/path/to/repo',\n   // everything else is up to you.\n}\n```\n\n##### Worker\n\nIf just a function is exposed, it is assumed to be \"fetch\".\n\n```javascript\nmodule.exports = {\n  // get the source code for a project. This is where the real work gets done.\n  //   dest: the path to put things\n  //   context: contains runCmd, io (for event passing)\n  fetch: function (dest, userConfig, config, job, context, done) {\n  },\n}\n```\n\n##### Extra Config\n\nUse `panel` for project-level config, and `userPanel` for user-level config.\n\n- `inline_icon` you can also define a `24x24` icon for the\n  `display_url` links. If this is not a path, it is assumed to be the\n  name of an icon from `FontAwesome` (without the `icon-` prefix) and\n  will be loaded as such. Defaults to `external-link`.\n\n### Job\n\n#### Webapp\n\n```javascript\n{\n   config: {}, // mongoose schema, if you need project-specific config\n   // Define project-specific routes\n   //   all routes created here are namespaced within /:org/:repo/api/:pluginid\n   //   req.project is the current project\n   //   req.accessLevel is the current user's access level for the project\n   //      0 - anonymous, 1 - authed, 2 - admin / collaborator\n   //   req.user is the current user\n   //   req.pluginConfig() -> get the config for this plugin\n   //   req.pluginConfig(config, cb(err)) -> set the config for this plugin\n   routes: function (app, context) {\n   },\n   // Define global routes\n   //   all routes namespaced within /ext/:pluginid\n   //   req.user is the current user\n   //   req.user.account_level can be used for authorization\n   //      0 - anonymous, 1 - authed, 2 - admin / collaborator\n   globalRoutes: function (app, context) {\n   },\n   // Listen for global events\n   //   all job-local events that begin with `plugin.` are proxied to\n   //   the main strider eventemitter, so you can listen for them here.\n   //   Other events include `job.new`, `job.done` and `browser.update`.\n   listen: function (emitter, context) {\n   }\n}\n```\n\n#### Worker\n\nIf only a function is exposed, it is assumed to be the `init(config,\njob, cb)` function.\n\nAutodetection rules are only used when a project has no plugins\nconfigured.\n\n```javascript\nmodule.exports = {\n  // Initialize the plugin for a job\n  //   config: the config for this job, made by extending the DB config\n  //           with any flat-file config\n  //   job:    see strider-runner-core for a description of that object\n  //   context: currently only defines \"dataDir\"\n  //   cb(err, initializedPlugin)\n  init: function (config, job, context, cb) {\n    return cb(null, {\n      // string or list - to be added to the PATH\n      path: path.join(__dirname, 'bin'),\n      // any extra env variables. Will be available during all phases\n      env: {},\n      // Listen for events on the internal job emitter.\n      //   Look at strider-runner-core for an\n      //   enumeration of the events. Emit plugin.[pluginid].myevent to\n      //   communicate things up to the browser or to the webapp.\n      listen: function (emitter, context) {\n      },\n      // For each phase that you want to deal with, provide either a\n      // shell command [string] for a fn(context, done(err, didrun))\n      environment: 'nvm install ' + (config.version || '0.10'),\n      prepare: 'npm install',\n      test: function (context, done) {\n        checkSomething(context, function (shouldDoThings) {\n          if (!shouldDoThings) {\n            // Send `false` to indicate that we didn't actually run\n            // anything. This is so we can warn users when no plugins\n            // actually do anything during a test run, and avoid false\n            // positives.\n            return done(null, false);\n          }\n          doThings(function (err) {\n            done(err, true);\n          });\n        });\n      },\n      cleanup: 'rm -rf node_modules'\n    });\n  }\n  // this is only used if there is _no_ plugin configuration for a\n  // project. See gumshoe for documentation on detection rules.\n  autodetect: {\n    filename: 'package.json',\n    exists: true\n  }\n}\n```\n\n##### Phase Context\n\n- job\n- project\n- dataDir\n- phase\n\n###### `cmd(cmd || options, done(exitCode))` Run a shell command\n\n```\n{\n  cmd: \"shell string\" || {command: \"\", args: [], screen: \"\"},\n  env: {}, // any extra env variables\n  cwd: \"\" // defaults to the root directory of the project\n}\n```\n\nIf the command contains sensitive information (such as a password or\nOAuth token), you can specify a `screen` command, which is what will\nbe output.\n\n###### status(type, args) Update the job status\n\nSee `strider-runner-core` for the `job.status.` events. This emits a\n`job.status.[type]` event with [jobid] + arguments.\n\n###### out(data, type) Output\n\nType defaults to `stdout`. It can be one of `stderr`, `message`,\n`error`, `warn`. `error` and `warn` are prefixed by a colored\n`[STRIDER] WARN | ERROR` and sent to `stderr`. `message` is prefixed\nby a colored `[STRIDER]` and sent to `stdout`.\n\n###### Other context data\n\nYou shouldn't need to use these, but they're there.\n\n- logger\n- io\n\n#### Extra config\n\n##### Icon\n\nJob plugins can also define an `icon` in the `strider.json` object,\nwhich is the path to a 48x48 image that will be shown on the project\nconfiguration page when a user is enabling plugins.\n\n##### Config Panel\n\nIf the plugin requires special configuration, it can also define a\n`panel` object in `strider.json`, which looks like:\n\n```javascript\n\"panel\": {\n  \"src\": \"path/to/file.html\",\n  \"controller\": \"NameOfCtrl\" // defaults to [pluginid]Controller\n}\n```\n\nDefine the angular controller in `/static/project_config.js`, which\nwill be loaded.\n\nSee [strider-webhooks](https://github.com/Strider-CD/strider-webhooks)\nfor an example of a custom config panel.\n\n### Basic\n\nThis is where you do whatever you want. It will not be listed in the\nUI anywhere automatically, so user configuration will require your own\ningenuity. If the need arises, we might expose some kind of config on\nthe system level to strider administrators, but not at the moment.\n\n#### Worker\n\nYou can listen for events, but you shouldn't run any tests or interact\nwith the source code in any way. For that, write a `job` plugin.\n\n```javascript\nmodule.exports = function (context, job, done) {\n}\n```\n\n#### Webapp\n\n```javascript\nmodule.exports = function (context, done) {\n}\n```\n\n\n### Webapp Plugin Context\n\nThis is what gets passed into the `basic` init function, as well as\nthe `listen` and `routes` functions of various plugin types.\n\n- config -- main strider config\n- emitter -- for passing events\n- models\n- logger\n- middleware\n- auth\n- app -- the express app\n- registerBlock\n\n#### registerBlock(name, cb)\n\n```javascript\nctx.registerBlock('HeaderBrand', function(context, cb) {\n  // context has a lot of useful stuff on it:\n\n  var email = context.currentUser.user.email;\n\n  // You can do some async processing here, but bear in mind\n  // you'll be blocking the page load.\n\n  cb(null, '<h1>FooStrider</h1>');\n});\n```\n\n#### Templates in strider.json\n\nBecause writing a bunch of `registerBlock` calls for simple pieces of template\noverrides is a little tedious, you can also use the following shortcut in your\nstrider.json:\n\n```javascript\n{\n  \"templates\": {\n    \"HeaderBrand\": \"<h1>An HTML String</h1>\",\n    \"FooterTOS\": \"./path/to/TOS.html\"\n  }\n}\n```\nThese are either inline strings or paths to static HTML. There is no templating\navailable for these at present.\n\n*Note* If more than one override is specified for a block, then the first one\nwill be used. At the moment this means that extensions can squash each other.\nIf you want to simply 'append' to a block, use the `registerBlock` method\nand make sure that you prefix the html you return with:\n`ctx.content` which will contain either the default html, or the content from\nprevious extensions.\n\n[config-controllers]: https://github.com/Strider-CD/strider/tree/master/client/config/controllers\n","maintainers":[{"name":"niallo","email":"nialljohiggins@gmail.com"},{"name":"knownasilya","email":"ilya@burstcreations.com"}],"time":{"modified":"2015-05-05T17:05:29.641Z","created":"2012-08-02T01:52:42.080Z","0.0.1":"2012-08-02T01:52:43.131Z","0.0.2":"2012-08-02T02:29:56.875Z","0.0.4":"2012-08-03T03:08:47.509Z","0.0.5":"2012-08-03T03:31:36.170Z","0.0.6":"2012-08-03T19:08:03.899Z","0.0.7":"2012-08-04T01:38:02.529Z","0.0.8":"2012-08-25T03:01:12.108Z","0.0.9":"2012-08-28T01:03:05.176Z","0.0.10":"2012-08-28T01:35:30.609Z","0.0.11":"2012-09-26T20:49:49.891Z","0.0.12":"2012-09-26T21:32:23.588Z","0.0.13":"2012-09-27T20:43:46.524Z","0.1.0":"2012-10-11T20:25:55.934Z","0.1.1":"2013-04-03T21:49:11.786Z","0.2.1":"2013-04-04T22:59:49.112Z","0.2.2":"2013-04-04T23:08:58.292Z","0.2.3":"2013-07-25T23:38:59.156Z","0.3.0":"2013-08-28T04:41:17.082Z","0.3.1":"2013-09-10T11:00:09.143Z","0.4.0":"2013-11-16T01:34:08.197Z","0.4.1":"2013-11-21T20:21:26.804Z","0.4.2":"2014-03-22T18:19:48.321Z","0.4.3":"2014-08-19T03:09:46.533Z","0.4.4":"2014-10-19T04:18:50.498Z","0.4.5":"2015-01-12T18:41:30.753Z"},"author":{"name":"Niall O'Higgins","email":"niallo@frozenridge.co","url":"http://frozenridge.co"},"repository":{"type":"git","url":"http://github.com/Strider-CD/strider-extension-loader"},"users":{"fgribreau":true},"homepage":"https://github.com/Strider-CD/strider-extension-loader","bugs":{"url":"https://github.com/Strider-CD/strider-extension-loader/issues"},"license":"BSD","readmeFilename":"README.md","_attachments":{},"_etag":"\"6Z31XCHQQHED22PCJ4RU3SH0E\""}